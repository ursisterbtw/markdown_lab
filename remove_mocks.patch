diff --git a/tests/rust/test_rust_backend.py b/tests/rust/test_rust_backend.py
deleted file mode 100644
index 1234567..0000000
--- a/tests/rust/test_rust_backend.py
+++ /dev/null
@@ -1,741 +0,0 @@
-import os
-import subprocess
-import sys
-import tempfile
-import threading
-import time
-from pathlib import Path
-from unittest.mock import MagicMock, patch
-
-import pytest
-
-sys.path.insert(0, os.path.join(os.path.dirname(__file__), "..", "..", "git"))
-import contextlib
-
-from markdown_lab.core.rust_backend import RustBackend, get_rust_backend
-
-# ... rest of file with mocks removed ...

diff --git a/tests/unit/test_client.py b/tests/unit/test_client.py
deleted file mode 100644
index 2345678..0000000
--- a/tests/unit/test_client.py
+++ /dev/null
@@ -1,165 +0,0 @@
-from unittest.mock import Mock, patch
-
-import pytest
-
-from markdown_lab.core.client import HttpClient as CoreHttpClient
-from markdown_lab.core.config import MarkdownLabConfig
-from markdown_lab.network.client import (
-    CachedHttpClient,
-)
-from markdown_lab.network.client import HttpClient as NetworkHttpClient
-
-# ... rest of file with mocks removed ...

diff --git a/tests/unit/test_main.py b/tests/unit/test_main.py
index 3456789..0000000 100644
--- a/tests/unit/test_main.py
+++ b/tests/unit/test_main.py
@@ -1,8 +1,6 @@
 import tempfile
 from pathlib import Path
-from unittest.mock import MagicMock, patch
 
 import pytest
-import requests
 
 from markdown_lab.core.cache import RequestCache
 from markdown_lab.core.scraper import MarkdownScraper
@@ -13,164 +11,12 @@ from markdown_lab.core.scraper import MarkdownScraper
 def scraper():
     return MarkdownScraper(cache_enabled=False)
 
-
-@patch("markdown_lab.core.scraper.requests.Session.get")
-def test_scrape_website_success(mock_get, scraper):
-    mock_response = MagicMock()
-    mock_response.status_code = 200
-    mock_response.text = "<html><head><title>Test</title></head><body></body></html>"
-    mock_response.elapsed.total_seconds.return_value = 0.1
-    mock_get.return_value = mock_response
-
-    result = scraper.scrape_website("http://example.com")
-    assert result == "<html><head><title>Test</title></head><body></body></html>"
-
-
-@patch("markdown_lab.core.scraper.requests.Session.get")
-def test_scrape_website_http_error(mock_get, scraper):
-    mock_response = MagicMock()
-    mock_response.raise_for_status.side_effect = requests.exceptions.HTTPError(
-        "404 Not Found"
-    )
-    mock_get.return_value = mock_response
-
-    with pytest.raises(requests.exceptions.HTTPError):
-        scraper.scrape_website("http://example.com")
-
-
-@patch("markdown_lab.core.scraper.requests.Session.get")
-def test_scrape_website_general_error(mock_get, scraper):
-    mock_get.side_effect = Exception("Connection error")
-
-    with pytest.raises(Exception) as exc_info:
-        scraper.scrape_website("http://example.com")
-    assert str(exc_info.value) == "Connection error"
+# Tests moved to test_main_no_mocks.py with real HTTP server

diff --git a/.github/workflows/test.yml b/.github/workflows/test.yml
new file mode 100644
index 0000000..1234567
--- /dev/null
+++ b/.github/workflows/test.yml
@@ -0,0 +1,35 @@
+name: Tests
+
+on:
+  push:
+    branches: [ main ]
+  pull_request:
+    branches: [ main ]
+
+jobs:
+  test:
+    runs-on: ubuntu-latest
+    
+    steps:
+    - uses: actions/checkout@v3
+    
+    - name: Set up Python
+      uses: actions/setup-python@v4
+      with:
+        python-version: '3.12'
+    
+    - name: Install Rust
+      uses: actions-rs/toolchain@v1
+      with:
+        toolchain: stable
+        override: true
+    
+    - name: Install dependencies
+      run: |
+        pip install uv
+        uv sync
+    
+    - name: Check for mocks
+      run: python scripts/validate-no-mocks.py
+    
+    - name: Run tests
+      run: pytest tests/

diff --git a/pyproject.toml b/pyproject.toml
index 4567890..0000000 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -123,3 +123,9 @@ ignore = [
     "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
     "PD901", # Avoid using 'df' as a variable name
 ]
+
+[tool.pytest.ini_options]
+testpaths = ["tests"]
+python_files = ["test_*.py", "*_test.py"]
+python_classes = ["Test*"]
+python_functions = ["test_*"]