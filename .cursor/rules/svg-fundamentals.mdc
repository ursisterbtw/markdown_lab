# SVG Fundamentals for High-Quality Graphics

## Core SVG Structure
- Always start with proper SVG namespace: `xmlns="http://www.w3.org/2000/svg"`
- Use appropriate viewBox for scalability: `viewBox="0 0 width height"`
- Set explicit width and height for banner images (e.g., 1280x640 for GitHub banners)
- Place all reusable elements in `<defs>` section at the top

## Essential SVG Elements

### Background Foundation
```svg
<rect width="100%" height="100%" fill="url(#bg-gradient)" />
```
- Always use a background rectangle as the foundation
- Prefer gradients over solid colors for depth
- Use percentage-based dimensions for flexibility

### Gradient Definitions
- Define gradients in `<defs>` section with descriptive IDs
- Use linear gradients for directional effects: `<linearGradient id="name" x1="0%" y1="0%" x2="100%" y2="100%">`
- Apply multiple stop points for smooth transitions
- Consider radial gradients for focal point effects

### Filters and Effects
- Define filters in `<defs>` for reusability
- Use `feGaussianBlur` for glow effects with appropriate `stdDeviation`
- Apply `feDropShadow` for text shadows with controlled opacity
- Keep filter dimensions generous: `x="-50%" y="-50%" width="200%" height="200%"`

### Patterns for Texture
```svg
<pattern id="grid" x="0" y="0" width="80" height="80" patternUnits="userSpaceOnUse">
  <path d="M 80 0 L 0 0 0 80" fill="none" stroke="#30363d" stroke-width="1" opacity="0.3"/>
</pattern>
```
- Use patterns for subtle background textures
- Keep pattern opacity low (0.3-0.4) for subtlety
- Ensure pattern units are appropriate for the design scale

## Performance Best Practices
- Group related elements with `<g>` tags
- Use transforms for positioning: `transform="translate(x, y)"`
- Minimize path complexity while maintaining quality
- Reuse gradient and filter definitions
- Use appropriate precision for numeric values (avoid excessive decimals)

## Semantic Structure
- Group logical sections (header, content, footer) with `<g>` elements
- Use descriptive comments for major sections
- Apply consistent naming conventions for IDs and classes
- Maintain proper nesting hierarchy

## Accessibility Considerations
- Include title and desc elements for complex graphics
- Use semantic grouping with role attributes when appropriate
- Ensure sufficient contrast ratios for text elements
- Provide alternative text context where necessary