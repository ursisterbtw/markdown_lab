name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CACHE_ON_FAILURE: false

jobs:
  # Single minimal test job - test only latest Python to save CI time
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: rust-${{ runner.os }}-${{ hashFiles('Cargo.toml', 'Cargo.lock') }}
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
      
      - name: Install dependencies
        run: |
          uv sync --dev
          source .venv/bin/activate
          pip install maturin
      
      - name: Rust quick checks
        run: |
          cargo fmt --check
          cargo clippy -- -D warnings
      
      - name: Build Rust extension
        run: |
          source .venv/bin/activate
          maturin develop --release
      
      - name: Python linting  
        run: |
          source .venv/bin/activate
          ruff check .
          mypy markdown_lab/
      
      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest -m "not integration" -x --tb=short  # Unit tests first
          cargo test --release
          # Attempt integration tests (non-networked)
          pytest -m integration -x --tb=short
      
      - name: Security scan - Python
        run: |
          source .venv/bin/activate
          pip install safety
          safety check --json || true  # Non-blocking for now
      
      - name: Security scan - Rust
        run: |
          cargo install cargo-audit --features vendored-libgit2 --locked || true
          cargo audit || true  # Non-blocking for now