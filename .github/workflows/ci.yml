name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CACHE_ON_FAILURE: false

jobs:
  test:
    name: Test (${{ matrix.os }} / py${{ matrix.python }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: ['3.12', '3.13']
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}
      
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: rust-${{ runner.os }}-${{ hashFiles('Cargo.toml', 'Cargo.lock') }}
      
      - name: Setup uv
        uses: astral-sh/setup-uv@v3
      
      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}
      
      - name: Install dependencies
        run: |
          uv sync --dev
          uv add --dev maturin pytest-cov
      
      - name: Rust quick checks
        run: |
          cargo fmt --check
          cargo clippy -- -D warnings
      
      - name: Build Rust extension
        run: |
          uv run maturin develop --release
      
      - name: Python linting  
        run: |
          uv run ruff check .
          uv run mypy markdown_lab/
      
      - name: Run tests
        run: |
          uv run pytest -m "not integration" -x --tb=short --cov=markdown_lab --cov-report=term --cov-fail-under=85
          cargo test --release
          # Attempt integration tests (non-networked)
          uv run pytest -m integration -x --tb=short
      
      - name: Security scan - Python
        run: |
          uv run python -m pip install --upgrade safety
          # Fail CI on any discovered vulnerabilities (tighten as needed)
          uv run safety check --full-report
      
      - name: Security scan - Rust
        run: |
          cargo install cargo-audit --features vendored-libgit2 --locked || true
          cargo audit

  rust-nightly-lints:
    name: Rust nightly lints
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Rust (nightly)
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy, rustfmt
      - name: Rust nightly fmt/clippy
        run: |
          cargo fmt --check
          cargo clippy -- -D warnings
