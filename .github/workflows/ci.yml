name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
  fast-checks:
    name: Lint + Unit Tests (Linux, py3.12)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Setup Rust (stable)
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Setup uv
        uses: astral-sh/setup-uv@v3

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-${{ hashFiles('pyproject.toml') }}

      - name: Install dependencies (dev)
        run: |
          uv sync --dev

      - name: Rust fmt/clippy (fast)
        run: |
          cargo fmt --check
          cargo clippy -- -D warnings

      - name: Build Rust extension (debug)
        run: |
          uv run maturin develop

      - name: Python linting
        run: |
          uv run ruff check .
          uv run mypy markdown_lab/

      - name: Run tests (unit + non-integration) with coverage
        run: |
          uv run pytest -m "not integration and not slow" --tb=short --cov=markdown_lab --cov-report=term --cov-fail-under=80
          cargo test

  # Optional heavier checks can run on schedule to save PR minutes
  security-weekly:
    if: github.event_name == 'schedule'
    name: Security Scans (weekly)
    runs-on: ubuntu-latest
    schedule:
      - cron: '0 0 * * 0'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Setup uv
        uses: astral-sh/setup-uv@v3
      - name: Install deps
        run: |
          uv sync --dev
      - name: Python dependency scan (Safety)
        run: |
          uv run python -m pip install --upgrade safety
          uv run safety check --full-report
      - name: Rust audit
        run: |
          cargo install cargo-audit --features vendored-libgit2 --locked || true
          cargo audit
